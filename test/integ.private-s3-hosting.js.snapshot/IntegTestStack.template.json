{
 "Resources": {
  "PrivateS3HostingVpcEED45DD1": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc"
     }
    ]
   }
  },
  "PrivateS3HostingVpcPublicSubnet1Subnet53C39CEA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet1RouteTable619E9F12": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet1RouteTableAssociationB1F69A86": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet1RouteTable619E9F12"
    },
    "SubnetId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet1Subnet53C39CEA"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet1DefaultRouteB9E816F1": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "PrivateS3HostingVpcIGW06DB07E8"
    },
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet1RouteTable619E9F12"
    }
   },
   "DependsOn": [
    "PrivateS3HostingVpcVPCGW5A598D28"
   ]
  },
  "PrivateS3HostingVpcPublicSubnet2SubnetC2DC3512": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet2RouteTable90B2BCFC": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet2RouteTableAssociation7A078134": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet2RouteTable90B2BCFC"
    },
    "SubnetId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet2SubnetC2DC3512"
    }
   }
  },
  "PrivateS3HostingVpcPublicSubnet2DefaultRoute76024F2F": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "PrivateS3HostingVpcIGW06DB07E8"
    },
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcPublicSubnet2RouteTable90B2BCFC"
    }
   },
   "DependsOn": [
    "PrivateS3HostingVpcVPCGW5A598D28"
   ]
  },
  "PrivateS3HostingVpcIsolatedSubnet1SubnetD14D2371": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/IsolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcIsolatedSubnet1RouteTable604BF647": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/IsolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcIsolatedSubnet1RouteTableAssociation0DE3AF38": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcIsolatedSubnet1RouteTable604BF647"
    },
    "SubnetId": {
     "Ref": "PrivateS3HostingVpcIsolatedSubnet1SubnetD14D2371"
    }
   }
  },
  "PrivateS3HostingVpcIsolatedSubnet2SubnetB9E0D9A2": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/IsolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcIsolatedSubnet2RouteTable8B17BF4E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc/IsolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcIsolatedSubnet2RouteTableAssociation806D153B": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateS3HostingVpcIsolatedSubnet2RouteTable8B17BF4E"
    },
    "SubnetId": {
     "Ref": "PrivateS3HostingVpcIsolatedSubnet2SubnetB9E0D9A2"
    }
   }
  },
  "PrivateS3HostingVpcIGW06DB07E8": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "IntegTestStack/PrivateS3Hosting/Vpc"
     }
    ]
   }
  },
  "PrivateS3HostingVpcVPCGW5A598D28": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "PrivateS3HostingVpcIGW06DB07E8"
    },
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingVpcRestrictDefaultSecurityGroupCustomResourceE52C51DC": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingVpcEED45DD1",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "PrivateS3HostingVpcS3GatewayEndpointD90D9E82": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "RouteTableIds": [
     {
      "Ref": "PrivateS3HostingVpcPublicSubnet1RouteTable619E9F12"
     },
     {
      "Ref": "PrivateS3HostingVpcPublicSubnet2RouteTable90B2BCFC"
     },
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet1RouteTable604BF647"
     },
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet2RouteTable8B17BF4E"
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".s3"
      ]
     ]
    },
    "VpcEndpointType": "Gateway",
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingS3InterfaceEndpointSecurityGroupBE96DDAD": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "IntegTestStack/PrivateS3Hosting/S3InterfaceEndpoint/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Fn::GetAtt": [
        "PrivateS3HostingVpcEED45DD1",
        "CidrBlock"
       ]
      },
      "Description": {
       "Fn::Join": [
        "",
        [
         "from ",
         {
          "Fn::GetAtt": [
           "PrivateS3HostingVpcEED45DD1",
           "CidrBlock"
          ]
         },
         ":443"
        ]
       ]
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingS3InterfaceEndpointSecurityGroupfromIntegTestStackPrivateS3HostingAlbSecurityGroup5BF4E43C443C5C1E3E3": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "from IntegTestStackPrivateS3HostingAlbSecurityGroup5BF4E43C:443",
    "FromPort": 443,
    "GroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingS3InterfaceEndpointSecurityGroupBE96DDAD",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingAlbSecurityGroup2A2D63AD",
      "GroupId"
     ]
    },
    "ToPort": 443
   }
  },
  "PrivateS3HostingS3InterfaceEndpoint0A39FF9C": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "PrivateS3HostingS3InterfaceEndpointSecurityGroupBE96DDAD",
       "GroupId"
      ]
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".s3"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet1SubnetD14D2371"
     },
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet2SubnetB9E0D9A2"
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingS3InterfaceEndpointGetEndpointIp00619AB5F": {
   "Type": "Custom::AWS",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"EC2\",\"action\":\"describeNetworkInterfaces\",\"parameters\":{\"NetworkInterfaceIds\":",
       {
        "Fn::GetAtt": [
         "CdkJsonStringify1",
         "Value"
        ]
       },
       "},\"physicalResourceId\":{\"id\":\"",
       {
        "Ref": "PrivateS3HostingS3InterfaceEndpoint0A39FF9C"
       },
       "\"},\"outputPaths\":[\"NetworkInterfaces.0.PrivateIpAddress\"]}"
      ]
     ]
    },
    "Update": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"EC2\",\"action\":\"describeNetworkInterfaces\",\"parameters\":{\"NetworkInterfaceIds\":",
       {
        "Fn::GetAtt": [
         "CdkJsonStringify1",
         "Value"
        ]
       },
       "},\"physicalResourceId\":{\"id\":\"",
       {
        "Ref": "PrivateS3HostingS3InterfaceEndpoint0A39FF9C"
       },
       "\"},\"outputPaths\":[\"NetworkInterfaces.0.PrivateIpAddress\"]}"
      ]
     ]
    },
    "InstallLatestAwsSdk": "false"
   },
   "DependsOn": [
    "PrivateS3HostingS3InterfaceEndpointGetEndpointIp0CustomResourcePolicy3D2F5595"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "PrivateS3HostingS3InterfaceEndpointGetEndpointIp0CustomResourcePolicy3D2F5595": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ec2:DescribeNetworkInterfaces",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PrivateS3HostingS3InterfaceEndpointGetEndpointIp0CustomResourcePolicy3D2F5595",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   }
  },
  "PrivateS3HostingS3InterfaceEndpointGetEndpointIp185C6C791": {
   "Type": "Custom::AWS",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"EC2\",\"action\":\"describeNetworkInterfaces\",\"parameters\":{\"NetworkInterfaceIds\":",
       {
        "Fn::GetAtt": [
         "CdkJsonStringify1",
         "Value"
        ]
       },
       "},\"physicalResourceId\":{\"id\":\"",
       {
        "Ref": "PrivateS3HostingS3InterfaceEndpoint0A39FF9C"
       },
       "\"},\"outputPaths\":[\"NetworkInterfaces.1.PrivateIpAddress\"]}"
      ]
     ]
    },
    "Update": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"EC2\",\"action\":\"describeNetworkInterfaces\",\"parameters\":{\"NetworkInterfaceIds\":",
       {
        "Fn::GetAtt": [
         "CdkJsonStringify1",
         "Value"
        ]
       },
       "},\"physicalResourceId\":{\"id\":\"",
       {
        "Ref": "PrivateS3HostingS3InterfaceEndpoint0A39FF9C"
       },
       "\"},\"outputPaths\":[\"NetworkInterfaces.1.PrivateIpAddress\"]}"
      ]
     ]
    },
    "InstallLatestAwsSdk": "false"
   },
   "DependsOn": [
    "PrivateS3HostingS3InterfaceEndpointGetEndpointIp1CustomResourcePolicy8FA4D692"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "PrivateS3HostingS3InterfaceEndpointGetEndpointIp1CustomResourcePolicy8FA4D692": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ec2:DescribeNetworkInterfaces",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PrivateS3HostingS3InterfaceEndpointGetEndpointIp1CustomResourcePolicy8FA4D692",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   }
  },
  "PrivateS3HostingBucket30B1B338": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "cryer-nao-domain.com",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "PrivateS3HostingBucketPolicy65E317FE": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "PrivateS3HostingBucket30B1B338"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "PrivateS3HostingBucket30B1B338",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PrivateS3HostingBucket30B1B338",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Condition": {
        "StringEquals": {
         "aws:sourceVpce": {
          "Ref": "PrivateS3HostingS3InterfaceEndpoint0A39FF9C"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "PrivateS3HostingBucket30B1B338",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PrivateS3HostingBucket30B1B338",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "PrivateS3HostingBucketAutoDeleteObjectsCustomResource7897F342": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "PrivateS3HostingBucket30B1B338"
    }
   },
   "DependsOn": [
    "PrivateS3HostingBucketPolicy65E317FE"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "PrivateS3HostingAlb021A4BED": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internal",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "PrivateS3HostingAlbSecurityGroup2A2D63AD",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet1SubnetD14D2371"
     },
     {
      "Ref": "PrivateS3HostingVpcIsolatedSubnet2SubnetB9E0D9A2"
     }
    ],
    "Type": "application"
   }
  },
  "PrivateS3HostingAlbSecurityGroup2A2D63AD": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB IntegTestStackPrivateS3HostingAlb996293FE",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingAlbSecurityGrouptoIntegTestStackPrivateS3HostingS3InterfaceEndpointSecurityGroup623E4E67443A77C4220": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "Description": "to IntegTestStackPrivateS3HostingS3InterfaceEndpointSecurityGroup623E4E67:443",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingS3InterfaceEndpointSecurityGroupBE96DDAD",
      "GroupId"
     ]
    },
    "FromPort": 443,
    "GroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingAlbSecurityGroup2A2D63AD",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "ToPort": 443
   }
  },
  "PrivateS3HostingAlbSecurityGroupfromIntegTestStackCloudShellSg53A0367680F062C9FD": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "from IntegTestStackCloudShellSg53A03676:80",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "PrivateS3HostingAlbSecurityGroup2A2D63AD",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "CloudShellSg676A0AA8",
      "GroupId"
     ]
    },
    "ToPort": 80
   }
  },
  "PrivateS3HostingAlbListenerA1E8A46E": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "PrivateS3HostingAlbListenerTargetGroup38693E12"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "PrivateS3HostingAlb021A4BED"
    },
    "Port": 80,
    "Protocol": "HTTP"
   }
  },
  "PrivateS3HostingAlbListenerRedirectRuleF008D581": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "RedirectConfig": {
       "Path": "/#{path}index.html",
       "Port": "80",
       "Protocol": "HTTP",
       "StatusCode": "HTTP_302"
      },
      "Type": "redirect"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "*/"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "PrivateS3HostingAlbListenerA1E8A46E"
    },
    "Priority": 1
   }
  },
  "PrivateS3HostingAlbListenerTargetGroup38693E12": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "Matcher": {
     "HttpCode": "307,405"
    },
    "Port": 443,
    "Protocol": "HTTPS",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "Targets": [
     {
      "Id": {
       "Fn::GetAtt": [
        "PrivateS3HostingS3InterfaceEndpointGetEndpointIp00619AB5F",
        "NetworkInterfaces.0.PrivateIpAddress"
       ]
      }
     },
     {
      "Id": {
       "Fn::GetAtt": [
        "PrivateS3HostingS3InterfaceEndpointGetEndpointIp185C6C791",
        "NetworkInterfaces.1.PrivateIpAddress"
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "PrivateS3HostingHostedZone3CFF459C": {
   "Type": "AWS::Route53::HostedZone",
   "Properties": {
    "Name": "cryer-nao-domain.com.",
    "VPCs": [
     {
      "VPCId": {
       "Ref": "PrivateS3HostingVpcEED45DD1"
      },
      "VPCRegion": {
       "Ref": "AWS::Region"
      }
     }
    ]
   }
  },
  "PrivateS3HostingAliasRecord8AC38807": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Join": [
       "",
       [
        "dualstack.",
        {
         "Fn::GetAtt": [
          "PrivateS3HostingAlb021A4BED",
          "DNSName"
         ]
        }
       ]
      ]
     },
     "HostedZoneId": {
      "Fn::GetAtt": [
       "PrivateS3HostingAlb021A4BED",
       "CanonicalHostedZoneID"
      ]
     }
    },
    "HostedZoneId": {
     "Ref": "PrivateS3HostingHostedZone3CFF459C"
    },
    "Name": "cryer-nao-domain.com.",
    "Type": "A"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "PrivateS3HostingVpcEED45DD1",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "dd5711540f04e06aa955d7f4862fc04e8cdea464cb590dae91ed2976bb78098e.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ]
  },
  "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ed6cd104ff5f101d06dae8cb2b87cc6e6d69b9a22055b467ea6cae10ff023023.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 120
   },
   "DependsOn": [
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
   ]
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "PrivateS3HostingBucket30B1B338"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ]
  },
  "CloudShellSg676A0AA8": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "IntegTestStack/CloudShellSg",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "PrivateS3HostingVpcEED45DD1"
    }
   }
  },
  "AWSCDKCfnUtilsProviderCustomResourceProviderRoleFE0EE867": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "AWSCDKCfnUtilsProviderCustomResourceProviderHandlerCF82AA57": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "78b70ad373a624989fdc7740e7aa19700d82dfc386c4bc849803634716c8fa4a.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "AWSCDKCfnUtilsProviderCustomResourceProviderRoleFE0EE867",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "AWSCDKCfnUtilsProviderCustomResourceProviderRoleFE0EE867"
   ]
  },
  "CdkJsonStringify1": {
   "Type": "Custom::AWSCDKCfnJsonStringify",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWSCDKCfnUtilsProviderCustomResourceProviderHandlerCF82AA57",
      "Arn"
     ]
    },
    "Value": {
     "Fn::GetAtt": [
      "PrivateS3HostingS3InterfaceEndpoint0A39FF9C",
      "NetworkInterfaceIds"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}